-- Q1
ALTER TABLE LINE ADD LINE_TOTAL NUMERIC(8,2);

-- Q2
UPDATE LINE SET LINE_TOTAL = LINE_UNITS * LINE_PRICE WHERE LINE_TOTAL IS NULL;

-- Q3
ALTER TABLE INVOICE ADD INV_SUBTOTAL NUMERIC(10,2), INV_TAX NUMERIC(6,2), INV_TOTAL NUMERIC(10,2);

-- Q4
UPDATE INVOICE
SET INV_SUBTOTAL = INV_SUMMARY.SUB_TOTAL
FROM INVOICE JOIN (SELECT INV_NUMBER, SUM(LINE_TOTAL) as SUB_TOTAL
                                       FROM LINE
                                       GROUP BY INV_NUMBER) as INV_SUMMARY
ON INVOICE.INV_NUMBER = INV_SUMMARY.INV_NUMBER;

-- This query updates the values of the INV_SUBTOTAL column
-- in the INVOICE table to the sum of the LINE_TOTAL column
-- in the LINE table for each invoice by joining
-- the sub query's table with the invoice table using
-- their invoice numbers.

-- Q5
-- Using SQL CASE statements
UPDATE INVOICE SET INV_TAX                                                             =
CASE WHEN INV_SUBTOTAL IS NOT NULL THEN INV_SUBTOTAL * 0.08 ELSE 0 END,
INV_TOTAL = CASE WHEN INV_SUBTOTAL IS NOT NULL THEN INV_SUBTOTAL + (INV_SUBTOTAL * 0.08) ELSE 0 END
WHERE INV_TAX IS NULL OR INV_TOTAL IS NULL;
SELECT * FROM INVOICE;

-- Using SQLServer IIF function to simplify the CASE statements
UPDATE INVOICE SET INV_TAX                                                             =
IIF(INV_SUBTOTAL IS NOT NULL, INV_SUBTOTAL * 0.08, 0), INV_TOTAL =
IIF(INV_SUBTOTAL IS NOT NULL, INV_SUBTOTAL + (INV_TAX), 0)
WHERE INV_TAX IS NULL OR INV_TOTAL IS NULL;

-- Q6
CREATE TRIGGER trg_line_total on LINE
AFTER INSERT AS
BEGIN
    UPDATE LINE SET LINE_TOTAL = LINE.LINE_UNITS * LINE.LINE_PRICE
    FROM LINE
    JOIN INSERTED ON LINE.LINE_NUMBER = INSERTED.LINE_NUMBER;
END

-- Q7
CREATE TRIGGER trg_line_prod on LINE AFTER INSERT AS
BEGIN
    UPDATE PRODUCT SET P_QOH = P_QOH - INSERTED.LINE_UNITS
    FROM PRODUCT
    JOIN INSERTED on PRODUCT.P_CODE = INSERTED.P_CODE;
END

-- Q8
CREATE PROCEDURE prc_inv_amounts @invNumber INT AS
BEGIN
    UPDATE INVOICE
    SET INV_SUBTOTAL = (SELECT SUM(LINE_TOTAL) FROM LINE WHERE INV_NUMBER = @invNumber),
    INV_TAX = INV_SUBTOTAL * 0.08,
    INV_TOTAL = INV_SUBTOTAL + INV_TAX
    WHERE INV_NUMBER = @invNumber;
END

-- Q9
CREATE PROCEDURE prc_cus_balance_update @invNum INT AS
BEGIN
    DECLARE @totalInv NUMERIC(10,2)
    SET @totalInv = (SELECT SUM(INV_TOTAL) FROM INVOICE WHERE INV_NUMBER = @invNum);
    UPDATE CUSTOMER SET CUS_BALANCE = CUS_BALANCE + @totalInv
        WHERE CUS_CODE = (SELECT CUS_CODE FROM INVOICE WHERE INV_NUMBER = @invNum);
END